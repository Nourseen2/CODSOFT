import numpy as np # linear algebra
import pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)

# Input data files are available in the read-only "../input/" directory
# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory

import os
for dirname, _, filenames in os.walk('/kaggle/input'):
    for filename in filenames:
        print(os.path.join(dirname, filename))


import numpy as np # linear algebra
import pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)
import os
import matplotlib.pyplot as plt
import seaborn as sns
import re
import string
import nltk
from nltk.corpus import stopwords
from nltk.stem import LancasterStemmer
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.svm import SVC
from sklearn.model_selection import train_test_split
from sklearn.metrics import accuracy_score, classification_report
import joblib
​
# Install necessary packages
!pip install -q scikit-learn
​
# Ensure NLTK resources are downloaded
nltk.download('stopwords')
nltk.download('punkt')
​
# Function to read and load data
def load_data(file_path, columns):
    try:
        data = pd.read_csv(file_path, delimiter=':::', engine='python', names=columns)
        if data.empty:
            raise ValueError(f"The file {file_path} is empty.")
        return data
    except Exception as e:
        print(f"Error reading {file_path}: {e}")
        return pd.DataFrame()
​
# Define file paths
train_file_path = '/kaggle/input/genre-classification-dataset-imdb/Genre Classification Dataset/train_data.txt'
test_file_path = '/kaggle/input/genre-classification-dataset-imdb/Genre Classification Dataset/test_data.txt'
​
# Load training and testing data
train_data = load_data(train_file_path, ["TITLE", "GENRE", "DESCRIPTION"])
test_data = load_data(test_file_path, ["ID", "TITLE", "DESCRIPTION"])
​
# Check if the data is loaded correctly
if train_data.empty or test_data.empty:
    raise ValueError("One of the data files is empty or could not be read correctly.")
​
# Display samples of the loaded data
print("Training data sample:")
print(train_data.head())
print("Testing data sample:")
print(test_data.head())
​
# Data Preprocessing
stemmer = LancasterStemmer()
stop_words = set(stopwords.words("english"))
​
def cleaning_data(text):
    text = text.lower()
    text = re.sub(r'@\S+', '', text)
    text = re.sub(r'http\S+', '', text)
    text = re.sub(r'\.pic\S+', '', text)
    text = re.sub(r'[^a-zA-Z\s]', '', text)
    words = nltk.word_tokenize(text)
    text = " ".join([stemmer.stem(word) for word in words if word not in stop_words and len(word) > 2])
    text = re.sub(r'\s+', ' ', text).strip()
    return text
​
train_data["TextCleaning"] = train_data["DESCRIPTION"].apply(cleaning_data)
test_data["TextCleaning"] = test_data["DESCRIPTION"].apply(cleaning_data)
​
# TF-IDF Vectorization
vectorizer = TfidfVectorizer(max_features=5000, stop_words='english')
X_train = vectorizer.fit_transform(train_data["TextCleaning"])
X_test = vectorizer.transform(test_data["TextCleaning"])
​
# Splitting the training data
X = X_train
y = train_data["GENRE"]
X_train_split, X_val, y_train_split, y_val = train_test_split(X, y, test_size=0.2, random_state=42)
​
# Training the SVM model
svm_model = SVC(kernel='linear', random_state=42)
svm_model.fit(X_train_split, y_train_split)
​
# Evaluating the model
y_pred = svm_model.predict(X_val)
accuracy = accuracy_score(y_val, y_pred)
classification_report_output = classification_report(y_val, y_pred)
​
print(f'Validation Accuracy: {accuracy}')
print('Classification Report:')
print(classification_report_output)
​
# Save the trained model and the TF-IDF vectorizer
joblib.dump(svm_model, 'svm_model.pkl')
joblib.dump(vectorizer, 'tfidf_vectorizer.pkl')
​
print("Model and vectorizer saved successfully.")
​
