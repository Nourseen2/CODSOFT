import numpy as np # linear algebra
import pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)

# Input data files are available in the read-only "../input/" directory
# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory

import os
for dirname, _, filenames in os.walk('/kaggle/input'):
    for filename in filenames:
        print(os.path.join(dirname, filename)) 
import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.naive_bayes import MultinomialNB
from sklearn.metrics import accuracy_score, classification_report, confusion_matrix
import matplotlib.pyplot as plt
import seaborn as sns

# Step 1: Load the dataset
file_path = '/kaggle/input/sms-spam-collection-dataset/spam.csv'
df = pd.read_csv(file_path, encoding='latin-1')

# Step 2: Display samples of the loaded data
print("Data sample:")
print(df.head())

# Step 3: Drop non-informative columns and rename columns for convenience
df = df.drop(columns=['Unnamed: 2', 'Unnamed: 3', 'Unnamed: 4'])
df.columns = ['label', 'message']

# Step 4: Convert labels to binary (ham -> 0, spam -> 1)
df['label'] = df['label'].map({'ham': 0, 'spam': 1})

# Step 5: Split the data into features and target
X = df['message']
y = df['label']

# Step 6: Split the data into training and validation sets
X_train, X_val, y_train, y_val = train_test_split(X, y, test_size=0.2, random_state=42)

# Step 7: Feature extraction using TF-IDF
tfidf_vectorizer = TfidfVectorizer(stop_words='english', max_df=0.7)

# Transform the training and validation data
X_train_tfidf = tfidf_vectorizer.fit_transform(X_train)
X_val_tfidf = tfidf_vectorizer.transform(X_val)

# Step 8: Train a Naive Bayes classifier
model = MultinomialNB()
model.fit(X_train_tfidf, y_train)

# Step 9: Make predictions
y_pred = model.predict(X_val_tfidf)

# Step 10: Evaluate the model
accuracy = accuracy_score(y_val, y_pred)
print('Accuracy:', accuracy)
print('Classification Report:')
print(classification_report(y_val, y_pred))
print('Confusion Matrix:')
print(confusion_matrix(y_val, y_pred))

# Step 11: Display the most important features
feature_names = tfidf_vectorizer.get_feature_names_out()
log_prob = model.feature_log_prob_

# Since it's a binary classification, we can take the difference between the log probabilities
feature_importances = pd.DataFrame({'feature': feature_names, 'importance': log_prob[1] - log_prob[0]})
top_features = feature_importances.sort_values(by='importance', ascending=False).head(10)

print("Top 10 Spam-Related Words:")
print(top_features)

# Plotting the most important features
plt.figure(figsize=(10, 6))
sns.barplot(x='importance', y='feature', data=top_features)
plt.title('Top 10 Spam-Related Words')
plt.xlabel('Importance')
plt.ylabel('Word')
plt.show()
